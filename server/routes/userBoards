const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const db = require("../db/mongoDB");

//MongoDb schemas for user accounts
const boardsSchema = new mongoose.Schema({
	title: String,
	board: Array,
});
const userSchema = new mongoose.Schema({
	//username: String,
	//password: String,
	userBoards: [boardsSchema],
});

const Board = mongoose.model("Board", userSchema);

//default board for new users
const defaultBoard = new Board({
	userBoards: [
		{
			title: "test",
			board: [
				{
					title: "Backlog",
					content: "",
					id: 1675537178752,
					cards: [
						{
							title: "Deployment",
							content: "-on Netlify",
							id: 1675537239808,
						},
					],
				},
				{
					title: "To Do",
					content: "",
					id: 1675537185659,
					cards: [
						{
							title: "MongoDB Integration",
							content: "-Express routing\n-Front end and back end integration",
							id: 1675537226110,
						},
					],
				},
				{
					title: "Done",
					content: "Completed Tasks",
					id: 1675537194973,
					cards: [],
				},
			],
		},
	],
});

/* router.route("/login").get(function (req, res) {
	const credentials = {
		username: req.body.username,
		password: req.body.password,
	};
	Board.findOne({credentials}, function(err, result){
		if (err){
			console.log("Could not login to account");
			return;
		}

		res.json(result.userBoards);
	})
}); */

/* router.route("/createAccount").get(function (req, res) {
	const newCredential = {
		username: req.body.username,
		password: req.body.password,
		userBoards: [],
	};
	Board.create({ newCredential }, function (err, result) {
		if (err){
			console.log("Could not create account");
			return;
		}
		
	});
}); */

//returns boards in user account from database
router.route("/boards").get(function (req, res) {
	const query = { _id: req.params.id };
	Board.findOne({}, function (err, result) {
		if (err) {
			console.log("Error with finding Boards");
			return;
		}

		if (result == null) {
			console.log("No results");
			defaultBoard.save();
			console.log(defaultBoard);
			res.json({ defaultBoard });
		} else {
			console.log("Returning Result");
			res.json(result);
		}
	});
});

//creates new board in database (updates userBoards)
router.route("/create").post(function(req, response){
	const query = {userBoards: req.params.id};
	const createNewBoard = {
		$push: {
			userBoards: {
				title: req.body.title, 
				board: [],
			}
		},
	};
	Board.updateOne({}, createNewBoard, function(err, res){
		if (err){
			console.log("Could not create Board");
			return;
		}
		console.log("New board created");
		response.json(res);
	});
});

//returns specific board from userBoards in database
router.route("/board/:id").get(function (req, res) {
	const boardID = req.params.id
	const query = { "userBoards._id": boardID };
	Board.findOne(query,{userBoards: {$elemMatch: {_id: boardID}}} ,function (err, result) {
		if (err) {
			console.log(err);
			return;
		}

		res.json(result)
		/* if (result == null) {
			console.log("No results");
			defaultBoard.save();
			console.log(defaultBoard);
			res.json({ defaultBoard });
		} else {
			console.log(query);
			console.log("Returning Result");
			res.json(result);
		} */
		
	});
});

//updates a specific user's board in database
router.route("/update/:id").post(function (req, response) {
	const query = { "userBoards._id": req.params.id };
	const updatedBoard = {
		$set: {
			"userBoards.$.title": req.body.title,
			"userBoards.$.board": req.body.board,
		},
	};
	Board.updateOne(query, updatedBoard, function (err, res) {
		if (err) throw err;
		console.log("Board updated");
		response.json(res);
	});
});

//deletes specific board from user boards in database (updates board)
router.route("/delete/:id").post(function (req, response) {
	const boardID = req.params.id;
	const query = { "userBoards._id": boardID };
	const removeBoard = {
		$pull: {
			userBoards: {_id: boardID }
		},
	};
	Board.updateOne(query, removeBoard, function (err, res) {
		if (err) throw err;
		console.log("Board removed");
		response.json(res);
	});
});
module.exports = router;
